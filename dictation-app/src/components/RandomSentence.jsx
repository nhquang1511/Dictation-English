import { useState, useEffect } from "react";
import "./RandomSentenceApp.css";

const levels = ["A1", "A2", "B1", "B2", "C1", "C2"];
const types = [
    "kh·∫≥ng ƒë·ªãnh", "ph·ªß ƒë·ªãnh", "c√¢u h·ªèi yes/no",
    "c√¢u h·ªèi wh-", "c√¢u h·ªèi ƒëu√¥i", "m·ªánh l·ªánh", "c√¢u c·∫£m th√°n"
];

const topics = [
    "Hi·ªán t·∫°i ƒë∆°n", "Hi·ªán t·∫°i ti·∫øp di·ªÖn", "Hi·ªán t·∫°i ho√†n th√†nh", "Hi·ªán t·∫°i ho√†n th√†nh ti·∫øp di·ªÖn",
    "Qu√° kh·ª© ƒë∆°n", "Qu√° kh·ª© ti·∫øp di·ªÖn", "Qu√° kh·ª© ho√†n th√†nh", "Qu√° kh·ª© ho√†n th√†nh ti·∫øp di·ªÖn",
    "T∆∞∆°ng lai ƒë∆°n", "T∆∞∆°ng lai ti·∫øp di·ªÖn", "T∆∞∆°ng lai ho√†n th√†nh", "T∆∞∆°ng lai ho√†n th√†nh ti·∫øp di·ªÖn",
    "Th√¨ t∆∞∆°ng lai g·∫ßn (be going to)", "Th√¨ hi·ªán t·∫°i ƒë∆°n di·ªÖn t·∫£ t∆∞∆°ng lai",
    "C√¢u b·ªã ƒë·ªông", "C√¢u ƒëi·ªÅu ki·ªán lo·∫°i 1", "C√¢u ƒëi·ªÅu ki·ªán lo·∫°i 2", "C√¢u ƒëi·ªÅu ki·ªán lo·∫°i 3",
    "C√¢u ƒëi·ªÅu ki·ªán h·ªón h·ª£p", "C√¢u gi√°n ti·∫øp", "M·ªánh ƒë·ªÅ quan h·ªá", "C√¢u ƒë·∫£o ng·ªØ",
    "C√¢u gi·∫£ ƒë·ªãnh (Subjunctive)", "C√¢u c·∫£m th√°n", "C√¢u m·ªánh l·ªánh",
    "Danh t·ª´", "ƒê·∫°i t·ª´", "T√≠nh t·ª´", "Tr·∫°ng t·ª´", "Gi·ªõi t·ª´", "Li√™n t·ª´", "M·∫°o t·ª´ (a/an/the)",
    "ƒê·ªông t·ª´ khuy·∫øt thi·∫øu (Modal verbs)", "C·ª•m ƒë·ªông t·ª´ (Phrasal verbs)",
    "S·ª± h√≤a h·ª£p ch·ªß v·ªã (Subject-Verb Agreement)", "Gerund v√† Infinitive (V-ing v√† To-V)",
    "So s√°nh (Comparisons)", "C√¢u h·ªèi ƒëu√¥i (Tag questions)", "C·∫•u tr√∫c WISH",
    "C·∫•u tr√∫c IT IS + ADJ + TO-V", "C·∫•u tr√∫c ENOUGH/TOO", "C√¢u gh√©p (Compound Sentence)"
];

export default function RandomSentenceApp() {
    const [level, setLevel] = useState("A2");
    const [topic, setTopic] = useState("Hi·ªán t·∫°i ƒë∆°n");
    const [type, setType] = useState("kh·∫≥ng ƒë·ªãnh");

    const [sentence, setSentence] = useState(null);
    const [structureHint, setStructureHint] = useState("");
    const [userInput, setUserInput] = useState("");
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        fetchSentence();
    }, [level, topic, type]);

    const fetchSentence = async () => {
        setLoading(true);
        try {
            const res = await fetch(
                `http://localhost:5000/random-sentence-gemini?level=${level}&topic=${encodeURIComponent(topic)}&type=${encodeURIComponent(type)}`
            );
            const data = await res.json();
            setSentence(data);
            setUserInput("");
            setResult(null);
            setStructureHint(getStructureHint(topic, type));
        } catch (err) {
            setSentence({ vi: "Kh√¥ng th·ªÉ t·∫£i c√¢u. Vui l√≤ng th·ª≠ l·∫°i.", en: "" });
            setResult(null);
            setStructureHint("");
        } finally {
            setLoading(false);
        }
    };

    const normalize = (text) => text.trim().toLowerCase().replace(/\s+/g, " ");

    const highlightDiff = (correct, user) => {
        const correctWords = correct.split(" ");
        const userWords = user.split(" ");
        return correctWords.map((w, i) => {
            if (userWords[i] && normalize(userWords[i]) === normalize(w)) {
                return `<span>${w}</span>`;
            } else {
                return `<span style="color:red; font-weight:bold;">${w}</span>`;
            }
        }).join(" ");
    };

    const handleCheck = () => {
        const isCorrect = normalize(userInput) === normalize(sentence.en);
        setResult({
            corrected: sentence.en,
            is_correct: isCorrect,
            highlighted: highlightDiff(sentence.en, userInput)
        });
    };

    return (
        <div className="random-sentence-app">
            <h2>Luy·ªán Vi·∫øt C√¢u Ti·∫øng Anh Theo Ng·ªØ Ph√°p</h2>

            <div className="controls">
                <select value={level} onChange={(e) => setLevel(e.target.value)}>
                    {levels.map(l => <option key={l}>{l}</option>)}
                </select>
                <select value={topic} onChange={(e) => setTopic(e.target.value)}>
                    {topics.map(t => <option key={t}>{t}</option>)}
                </select>
                {!(topic === "C√¢u h·ªèi ƒëu√¥i" || topic === "C√¢u m·ªánh l·ªánh" || topic === "C√¢u c·∫£m th√°n") && (
                    <select value={type} onChange={(e) => setType(e.target.value)}>
                        {types.map(t => <option key={t}>{t}</option>)}
                    </select>
                )}
                <button onClick={fetchSentence} disabled={loading}>
                    {loading ? "ƒêang t·∫£i..." : "üîÅ C√¢u m·ªõi"}
                </button>
            </div>

            {sentence && (
                <div className="exercise">
                    <p><strong>C√¢u ti·∫øng Vi·ªát:</strong> {sentence.vi}</p>
                    {structureHint && (
                        <div className="structure-hint">
                            üìò G·ª£i √Ω c·∫•u tr√∫c: <code>{structureHint}</code>
                        </div>
                    )}
                    <textarea
                        rows={3}
                        value={userInput}
                        onChange={(e) => setUserInput(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === "Enter" && !e.shiftKey) {
                                e.preventDefault();
                                handleCheck();
                            }
                        }}
                        placeholder="B·∫°n h√£y vi·∫øt c√¢u ti·∫øng Anh t·∫°i ƒë√¢y..."
                        disabled={loading}
                    />
                    <div style={{ display: "flex", gap: "10px" }}>
                        <button onClick={handleCheck} disabled={loading || !userInput.trim()}>
                            Ki·ªÉm tra
                        </button>
                        <button onClick={fetchSentence} disabled={loading}>
                            ‚û°Ô∏è Next
                        </button>
                    </div>
                </div>
            )}

            {result && (
                <div className="feedback">
                    <p>
                        <strong>‚úÖ C√¢u ƒë√∫ng:</strong>{" "}
                        <span
                            dangerouslySetInnerHTML={{ __html: result.highlighted }}
                            onClick={() => {
                                const u = new SpeechSynthesisUtterance(sentence.en);
                                u.lang = "en-US";
                                speechSynthesis.speak(u);
                            }}
                            style={{ cursor: "pointer", textDecoration: "underline" }}
                        />
                    </p>
                    {!result.is_correct && (
                        <p style={{ color: "red" }}>‚ùå B·∫°n ƒë√£ vi·∫øt ch∆∞a ƒë√∫ng. H√£y xem l·∫°i ph·∫ßn m√†u ƒë·ªè.</p>
                    )}
                </div>
            )}
        </div>
    );
}

// Dummy getStructureHint ‚Äì b·∫°n c√≥ th·ªÉ ch√®n l·∫°i ƒë·∫ßy ƒë·ªß nh∆∞ tr∆∞·ªõc
function getStructureHint(topic, type = "kh·∫≥ng ƒë·ªãnh") {
    const hints = {
        "Hi·ªán t·∫°i ƒë∆°n": {
            "kh·∫≥ng ƒë·ªãnh": "S + V(s/es)",
            "ph·ªß ƒë·ªãnh": "S + do/does + not + V",
            "c√¢u h·ªèi yes/no": "Do/Does + S + V?",
            "c√¢u h·ªèi wh-": "Wh + do/does + S + V?"
        },
        // ... b·∫°n ch√®n to√†n b·ªô danh s√°ch g·ª£i √Ω ·ªü ƒë√¢y nh∆∞ b·∫°n ƒë√£ c√≥
    };
    const hint = hints[topic];
    if (typeof hint === "object" && hint !== null) {
        return hint[type] || hint["kh·∫≥ng ƒë·ªãnh"];
    }
    return hint || "";
}
